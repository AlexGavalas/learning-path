---
import List from '~components/list.astro';
import ListItem from '~components/list-item.astro';
import FormattedDate from '~components/formatted-date.astro';
import type { Note } from '~types/notes.types';
import { date } from 'astro/zod';

type _Note = Pick<Note, 'filename' | 'updated' | 'title'>;

export type Props = {
    notes: _Note[];
    lines?: Record<string, string[]>;
    timeZone: string;
    baseUrl: string;
};

const { notes, lines, timeZone, baseUrl } = Astro.props;
const hasNotes = notes.length > 0;
---

<style type="scss">
    .link {
        display: grid;
        grid-template-columns: auto 1fr auto;
        gap: 8px;
        padding: 8px;
        @apply hover:bg-[#e2e2e2] dark:hover:bg-neutral-800;
    }

    .link:hover::after {
        @apply animate-pulse;
        content: '‚áù';
    }

    .text {
        @apply text-light-primary dark:text-dark-primary;
    }
</style>

{
    hasNotes ? (
        <ul class="list-none divide-y-2 divide-solid divide-light-border dark:divide-zinc-800">
            {notes.map(({ filename, updated, title }, index) => {
                const dateId = `${index}d`;
                const textId = `${index}t`;

                return (
                    <li>
                        <a
                            aria-labelledby={`${textId} ${dateId}`}
                            class="link"
                            href={`/${baseUrl}/${filename}`}
                        >
                            <FormattedDate
                                dateString={updated}
                                format="dd/MM/yy"
                                id={dateId}
                                label="Last updated at"
                                timeZone={timeZone}
                            />
                            <span
                                aria-label={`Notes about ${title}`}
                                class="text"
                                id={textId}
                            >
                                {title}
                            </span>
                        </a>
                        {lines?.[title] && (
                            <List>
                                {lines[title].map((line) => (
                                    <ListItem key={line}>{line}</ListItem>
                                ))}
                            </List>
                        )}
                    </li>
                );
            })}
        </ul>
    ) : (
        <p class="text-center">No notes found</p>
    )
}
