---
import List from '~components/list.astro';
import ListItem from '~components/list-item.astro';
import FormattedDate from '~components/formatted-date.astro';
import type { Note } from '~types/notes.types';

type _Note = Pick<Note, 'filename' | 'updated' | 'title'>;

export type Props = {
    notes: _Note[];
    lines?: Record<string, string[]>;
    timeZone: string;
    baseUrl: string;
};

const { notes, lines, timeZone, baseUrl } = Astro.props;
const hasNotes = notes.length > 0;
---

<style>
    .link {
        display: grid;
        grid-template-columns: auto 1fr auto;
        gap: 8px;
        padding: 8px;
        @apply hover:bg-[#e2e2e2] dark:hover:bg-neutral-800;
    }

    .link .text {
        @apply text-light-primary dark:text-dark-primary;
    }

    .link:hover .arrow {
        @apply animate-pulse;
    }
</style>

{
    hasNotes ? (
        <ul class="list-none divide-y-2 divide-solid divide-light-border dark:divide-zinc-800">
            {notes.map(({ filename, updated, title }) => (
                <li>
                    <a href={`/${baseUrl}/${filename}`} class="link">
                        <FormattedDate
                            dateString={updated}
                            timeZone={timeZone}
                            format="dd/MM/yy"
                        />
                        <span class="text">{title}</span>
                        <span class="arrow opacity-0">&#x21dd;</span>
                    </a>
                    {lines?.[title] && (
                        <List>
                            {lines[title].map((line) => (
                                <ListItem key={line}>{line}</ListItem>
                            ))}
                        </List>
                    )}
                </li>
            ))}
        </ul>
    ) : (
        <p class="text-center">No notes found</p>
    )
}
