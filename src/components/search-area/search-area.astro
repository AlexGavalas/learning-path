---
import { QUERY_FIELD_NAME } from '~constants';
import Loader from '~components/loader/linear.astro';
import Button from '~components/button/button.astro';
import Input from '~components/input/input.astro';
import * as cn from './search-area.css';

interface Props {
    query?: string;
}

const { query } = Astro.props;
---

<search-area>
    <form class={cn.container}>
        <Input
            label="Search notes"
            name={QUERY_FIELD_NAME}
            autocomplete="off"
            placeholder="Type here"
            value={query}
        />
        <div class={cn.searchButton}>
            <Button>Search</Button>
        </div>
        <div id="loader" class={cn.loader} hidden>
            <Loader />
        </div>
    </form>
</search-area>

<script>
    import { QUERY_FIELD_NAME } from '~constants';

    class SearchArea extends HTMLElement {
        formElement: HTMLFormElement | null = null;
        inputElement: HTMLInputElement | null = null;
        loaderElement: HTMLDivElement | null = null;

        constructor() {
            super();

            this.formElement = this.querySelector('form');
            this.inputElement = this.querySelector('input');
            this.loaderElement = this.querySelector('#loader');
        }

        handleKeyUp = (e: KeyboardEvent) => {
            if (e.key === '/') {
                this.inputElement?.focus();
            }
        };

        handleSearch = (e: SubmitEvent) => {
            if (this.loaderElement) {
                this.loaderElement.hidden = false;
            }

            const url = new URL(location.href);
            const query = this.inputElement?.value ?? '';

            if (query.length > 0) {
                url.searchParams.set(QUERY_FIELD_NAME, query);
            } else {
                url.searchParams.delete(QUERY_FIELD_NAME);
            }

            if (this.loaderElement) {
                this.loaderElement.hidden = true;
            }

            window.location.href = url.toString();

            e.preventDefault();
        };

        connectedCallback() {
            document.addEventListener('keyup', this.handleKeyUp);
            this.formElement?.addEventListener('submit', this.handleSearch);
        }

        disconnectedCallback() {
            document.removeEventListener('keyup', this.handleKeyUp);
            this.formElement?.removeEventListener('submit', this.handleSearch);
        }
    }

    customElements.define('search-area', SearchArea);
</script>
