---
import Button from '~components/button/button.astro';
import {
    DEFAULT_THEME,
    THEME,
    ONE_YEAR,
    DARK_IMG_PROPS,
    LIGHT_IMG_PROPS,
} from '~constants';

const themeCookie = Astro.cookies.get('theme');
const theme = themeCookie?.value ?? DEFAULT_THEME;

const attributes = theme === THEME.LIGHT ? LIGHT_IMG_PROPS : DARK_IMG_PROPS;
---

<theme-switch>
    <form method="post" action="/api/theme-toggle">
        <input type="hidden" name="theme" value="toggle" />
        <Button variant="wrapper">
            <img {...attributes} width="20" height="20" />
        </Button>
    </form>
</theme-switch>

<script
    is:inline
    define:vars={{
        DARK_IMG_PROPS,
        LIGHT_IMG_PROPS,
        ONE_YEAR,
        THEME,
    }}
>
    const getThemeFromCookie = () => {
        const themeCookie = document.cookie
            .split('; ')
            .find((row) => row.startsWith('theme='));

        return themeCookie?.split('=')[1];
    };

    const getThemeFromOsPreference = () => {
        const themes = [
            { colorScheme: 'light', theme: THEME.LIGHT },
            { colorScheme: 'dark', theme: THEME.DARK },
        ];

        for (const { colorScheme, theme } of themes) {
            const hasPreference = window.matchMedia(
                `(prefers-color-scheme: ${colorScheme})`,
            ).matches;

            if (hasPreference) {
                return theme;
            }
        }
    };

    const setThemeInPage = (theme) => {
        document.documentElement.classList.toggle(
            'light',
            theme === THEME.LIGHT,
        );

        document.documentElement.classList.toggle('dark', theme === THEME.DARK);

        document.documentElement.style.setProperty('color-scheme', theme);
    };

    const getInitialTheme = () =>
        getThemeFromCookie() ?? getThemeFromOsPreference() ?? DEFAULT_THEME;

    // Set the theme inline to avoid a flash of the default theme
    setThemeInPage(getInitialTheme());

    class ThemeSwitch extends HTMLElement {
        themeChannel =
            typeof BroadcastChannel === 'function'
                ? new BroadcastChannel('learning-path-theme')
                : null;

        buttonElement;
        imageElement;
        theme;

        setCookie = (theme) => {
            document.cookie = `theme=${theme}; max-age=${ONE_YEAR}; path=/;`;
        };

        setTheme = (theme) => {
            setThemeInPage(theme);

            if (this.imageElement) {
                const attributes =
                    theme === THEME.LIGHT ? LIGHT_IMG_PROPS : DARK_IMG_PROPS;

                Object.entries(attributes).forEach(([key, value]) => {
                    this.imageElement.setAttribute(key, value);
                });
            }

            this.setCookie(theme);
            this.theme = theme;
        };

        toggleTheme = (e) => {
            const theme = this.theme === THEME.LIGHT ? THEME.DARK : THEME.LIGHT;

            if (document.startViewTransition) {
                document.startViewTransition(() => {
                    this.setTheme(theme);
                });
            } else {
                this.setTheme(theme);
            }

            this.themeChannel?.postMessage({ theme });

            e.preventDefault();
        };

        handleOsPreferenceChange = (e) => {
            const theme = e.matches ? THEME.DARK : THEME.LIGHT;

            this.setTheme(theme);
        };

        handleBroadcastMessage = (e) => {
            const { theme } = e.data;

            this.setTheme(theme);
        };

        connectedCallback() {
            this.buttonElement = this.querySelector('button');
            this.imageElement = this.querySelector('img');

            this.setTheme(getInitialTheme());

            this.buttonElement?.addEventListener('click', this.toggleTheme);

            // Listem for OS preference changes
            window
                .matchMedia('(prefers-color-scheme: dark)')
                .addEventListener('change', this.handleOsPreferenceChange);

            this.themeChannel?.addEventListener(
                'message',
                this.handleBroadcastMessage,
            );
        }

        disconnectedCallback() {
            this.buttonElement?.removeEventListener('click', this.toggleTheme);

            window
                .matchMedia('(prefers-color-scheme: dark)')
                .removeEventListener('change', this.handleOsPreferenceChange);

            this.themeChannel?.removeEventListener(
                'message',
                this.handleBroadcastMessage,
            );
        }
    }

    customElements.define('theme-switch', ThemeSwitch);
</script>
